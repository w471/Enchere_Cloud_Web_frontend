import type { PropsWithChildren, HTMLAttributes, InputHTMLAttributes, ReactNode, CSSProperties, RefObject, MutableRefObject, SetStateAction, Dispatch } from 'react';
import React from 'react';
declare type ComboboxContext = {
    contextAvailable: boolean;
    listboxId?: string;
    selectedItemId?: string;
    isExpanded?: boolean;
    currentInputValue?: string;
};
declare const ComboboxContext: React.Context<ComboboxContext>;
declare const useComboboxContext: () => ComboboxContext;
/**
 * Use this hook to control the open state and input value of the combobox.
 * Pass the properties down to the DataListInput component.
 */
declare const useComboboxControls: (params?: {
    isExpanded: boolean;
    initialValue?: string | undefined;
} | undefined) => {
    isExpanded: boolean | undefined;
    value: string;
    setIsExpanded: (newState: boolean | undefined) => void;
    setValue: Dispatch<SetStateAction<string>>;
};
/**
 * An elegant way to style elements based on the current state of the component.
 * Inspired by react-router: https://v5.reactrouter.com/web/api/NavLink/classname-string-func
 */
declare type ClassNameFunction<Params> = (params: Params) => string;
declare type ClassName<Params> = HTMLAttributes<HTMLLIElement>['className'] | ClassNameFunction<Params>;
declare type UseComboboxHelpersConfigParams = {
    itemsRef: MutableRefObject<Item[]>;
    listboxRef: RefObject<HTMLElement>;
    comboboxInputRef: RefObject<HTMLInputElement>;
    isExpandedRef: React.MutableRefObject<boolean>;
    onSelect?: (item: Item) => void;
    setIsExpanded?: (isExpanded: boolean) => void;
    setValue?: (value: string) => void;
    setSelectedItem?: (item: Item) => void;
};
/**
 * The helpers returned by this hook can be used
 * to construct a custom Combobox behavior to your liking.
 * Wrap the low-level components in the Combobox component
 * and pass the helpers down if you need them.
 */
declare function useComboboxHelpers({ itemsRef, listboxRef, comboboxInputRef, onSelect, isExpandedRef, setIsExpanded, setValue, setSelectedItem, }: UseComboboxHelpersConfigParams): {
    closeOnEscape: (e: KeyboardEvent) => void;
    handleClickOutside: (e: MouseEvent) => void;
    handleFocusOutside: () => void;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    expandOnFocus: () => void;
    handleSelect: (item: Item) => void;
    handleKeyDownOnInput: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    handleKeyDownOnListboxOption: (e: React.KeyboardEvent<HTMLLIElement>) => void;
};
declare type ComboboxInputProps = Omit<InputHTMLAttributes<HTMLInputElement>, 'value'> & {
    value?: string;
};
/**
 * The textbox input field.
 * Does currently not implement aria-activedescendant which is not obligatory for datalist input components.
 * Autocomplete off to prevent browser autocomplete from interfering with our own; can be overridden with props.
 */
declare const ComboboxInput: React.ForwardRefExoticComponent<Omit<InputHTMLAttributes<HTMLInputElement>, "value"> & {
    value?: string | undefined;
} & React.RefAttributes<HTMLInputElement>>;
declare type HighlightProps = HTMLAttributes<HTMLElement> & {
    currentInput?: string;
    as?: 'mark' | 'span';
};
/**
 * Optional highlight component for the listbox option text.
 * Should be wrapped by ListboxOption. Provide ListBoxOption an aria-label to ensure accessibility, especially if using mark.
 */
declare const Highlight: React.FC<PropsWithChildren<HighlightProps>>;
declare type ListboxOptionClassNameParams = {
    isSelected: boolean;
};
declare type ListboxOptionProps = Omit<HTMLAttributes<HTMLLIElement>, 'className'> & {
    className?: ClassName<ListboxOptionClassNameParams>;
};
/**
 * One listbox option.
 */
declare const ListboxOption: React.ForwardRefExoticComponent<Omit<HTMLAttributes<HTMLLIElement>, "className"> & {
    className?: ClassName<ListboxOptionClassNameParams>;
} & React.RefAttributes<HTMLLIElement>>;
declare type ListboxProps = HTMLAttributes<HTMLUListElement>;
/**
 * The combobox popup list.
 */
declare const Listbox: React.ForwardRefExoticComponent<ListboxProps & React.RefAttributes<HTMLUListElement>>;
declare type ComboboxProps = {
    listboxId?: ComboboxContext['listboxId'];
    selectedItemId?: ComboboxContext['selectedItemId'];
    isExpanded?: ComboboxContext['isExpanded'];
    currentInputValue?: ComboboxContext['currentInputValue'];
};
declare type Combobox = React.FC<PropsWithChildren<ComboboxProps>> & {
    ComboboxInput: typeof ComboboxInput;
    Listbox: typeof Listbox;
    ListboxOption: typeof ListboxOption;
    Highlight: typeof Highlight;
};
/**
 * A container that you can pass all low-level components yourself for advanced use-cases.
 * The Combobox provides the context for the combobox low-level components.
 */
declare const Combobox: Combobox;
declare type Item = any & {
    id: string;
    value: string;
    node?: ReactNode;
    label?: string;
};
declare type Filter = (items: Item[], value?: ComboboxInputProps['value']) => Item[];
/**
 * Alternative function for matching the current input value (needle) and the values of the items array.
 * Returns true if item.value is not of type string (all items will be displayed and a custom filter must be used).
 */
declare const startsWithValueFilter: Filter;
/**
 * Default function for matching the current input value (needle) and the values of the items array.
 * Returns true if item.value is not of type string (all items will be displayed and a custom filter must be used).
 */
declare const includesValueFilter: Filter;
declare function useFilters(items: Item[], value: ComboboxInputProps['value'], filters: Filter[]): [Item[], MutableRefObject<Item[]>];
declare type LabelOptionProps = {
    showLabel?: false;
    label: string;
} | {
    showLabel?: true;
    label: ReactNode;
};
declare type LabelProps = HTMLAttributes<HTMLLabelElement>;
declare type DatalistInputProps = LabelOptionProps & Omit<HTMLAttributes<HTMLDivElement>, 'onSelect'> & {
    items: Item[];
    selectedItem?: Item;
    value?: ComboboxInputProps['value'];
    setValue?: UseComboboxHelpersConfigParams['setValue'];
    onSelect?: UseComboboxHelpersConfigParams['onSelect'];
    isExpanded?: ComboboxContext['isExpanded'];
    setIsExpanded?: UseComboboxHelpersConfigParams['setIsExpanded'];
    placeholder?: ComboboxInputProps['placeholder'];
    filters?: Filter[];
    inputProps?: ComboboxInputProps;
    labelProps?: LabelProps;
    listboxProps?: ListboxProps;
    listboxOptionProps?: ListboxOptionProps;
    isExpandedClassName?: string;
    isCollapsedClassName?: string;
    isExpandedStyle?: CSSProperties;
    isCollapsedStyle?: CSSProperties;
};
/**
 * DatalistInput implements all lower-level components for you and provides a simple API for controlling the combobox.
 * Note: Use the useComboboxControls hook to control the value and expanded state of the combobox.
 * DatalistInput implements the ARIA1.2#comboBox specification, including keyboard navigation with ArrowUp and ArrowDown.
 * DatalistInput does currently not implement aria-activedescendant but shifts the focus to the listbox options on ArrowUp and ArrowDown.
 * Note: tabIndex of all listbox options is set to -1 to allow the user to use tab or shift tab to jump out of the datalist without the need to tab through all options.
 */
declare const DatalistInput: React.ForwardRefExoticComponent<DatalistInputProps & React.RefAttributes<HTMLDivElement>>;
export type { DatalistInputProps, ComboboxProps, ComboboxInputProps, ListboxProps, ListboxOptionProps, HighlightProps, UseComboboxHelpersConfigParams, Item, Filter, };
export { Combobox, DatalistInput, startsWithValueFilter, includesValueFilter, useFilters, useComboboxContext, useComboboxControls, useComboboxHelpers, };
export default DatalistInput;
